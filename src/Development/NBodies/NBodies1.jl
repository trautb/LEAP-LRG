#========================================================================================#
"""
	NBodies - Verson 1

A system of N interacting bodies moving in dim dimensions over time T in res timesteps.
In version 1 we display a static plot of dummy data generated by simulate().

Author: Niall Palfreyman, 29/05/2022.
"""
module NBodies

using GLMakie

#-----------------------------------------------------------------------------------------
# Module types:
#-----------------------------------------------------------------------------------------
"""
	NBody

An NBody system capable of containing multiple (N) bodies that gravitationally interact
with each other.
"""
mutable struct NBody
	N							# Number of bodies
	nsteps						# Duration of simulation
	dt							# Timestep resolution
	x0							# Initial positions of bodies
	p0							# Initial momenta of bodies
	m							# Masses of bodies

	"Construct a new NBody"
	function NBody( T=40, resolution=20000, G=1)
		# Initialise all fields of the decoding apparatus:
		new(
			0,					# Initially no bodies in the system
			resolution,			# Duration
			T/resolution,		# Timestep resolution
			[],					# Initial positions
			[],					# Initial momenta
			[],					# Masses of bodies
		)
	end
end

#-----------------------------------------------------------------------------------------
# Module methods:
#-----------------------------------------------------------------------------------------
"""
	addbody!( nbody::NBody, x0::Vector{Float64}, p0::Vector{Float64}, m::Float64=1)

Add to the system a new body with initial position and momentum x0, p0, and with mass m.
"""
function addbody!( nbody::NBody, x0::Vector{Float64}, p0::Vector{Float64}, m::Float64=1.0)
	push!( nbody.x0, x0)
	push!( nbody.p0, p0)
	push!( nbody.m, m)
	nbody.N  += 1
end

#-----------------------------------------------------------------------------------------
"""
	simulate( nb::NBody)

Run a simulation of the given NBody system over duration nb.nsteps * nb.dt.
In this preliminary version, we just generate dummy sin/cos data for x and p. Its purpose is
simply to provide some kind of data for animate to display graphically.
"""
function simulate( nb::NBody)
	t = 0 : nb.dt : nb.nsteps*nb.dt					# This is the correct set of time values
	x = sin.(t)										# This is the same length as t.
	p = cos.(t)										# This is also the same length as t.

	(t,x,p)
end

#-----------------------------------------------------------------------------------------
"""
	animate( nb::NBody, t, x, p)

Animate the simulation data (t,x,p) of the given NBody system.
In this preliminary version of NBodies, we merely provide a static plot of the simulation data.
"""
function animate( nb::NBody, t, x, p)
	# Prepare the graphics axes:
	fig = Figure(resolution=(1200, 1200))
	ax = Axis(fig[1, 1], xlabel = "x", ylabel = "y", title = "N-body 2D Motion")
	limits!(ax, -3, 3, -3, 3)

	# Plot a curve of p against x:
	lines!( ax, x, p, linewidth = 5, color = :blue)

	# Insert some explanatory text:
	text!( "This will contain time data", position=(-2.5, 2.5), textsize=30, align=(:left,:center))

	# Display the results:
	display(fig)
end

#-----------------------------------------------------------------------------------------
"""
	unittest()

Demonstrate simulation of a simple 2-body problem in a simple 3-step use-case.
This version is identical with version 0.
"""
function unittest()
	# Build the 2-body system:
	nb = NBody( 20, 1000)								# 20 time units divided into 1000 steps
	addbody!( nb, [0.0, 1.0], [ 0.8,0.0], 2.0)			# Sun (m = 2)
	addbody!( nb, [0.0,-1.0], [-0.8,0.0])				# Planet (m = 1)
	
	# Calculate the simulation data:
	(t,x,p) = simulate(nb)

	# Run the animation:
	animate( nb, t, x, p)
end

end		# of NBodies